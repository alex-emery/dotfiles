# the core of this is 100% stolen from https://github.com/mattmc3/zsh_unplugged

# You can also separate the clone and load portions for more advanced plugin loads

# where should we download your Zsh plugins?
ZPLUGINDIR=${ZDOTDIR:-$HOME/.config/zsh}/plugins

# ohmyzsh wants a cache dir for things
export ZSH_CACHE_DIR=${HOME}/.config/zsh/plugins/ohmyzsh/cache
# and cache/completion to exist for things like kubectl completion
[ -d $ZPLUGINDIR/ohmyzsh/cache/completions ] || mkdir $ZPLUGINDIR/ohmyzsh/cache/completions
fpath+=$ZPLUGINDIR/ohmyzsh/cache/completions

### Helpers
function plugin-update {
  ZPLUGINDIR=${ZPLUGINDIR:-$HOME/.config/zsh/plugins}
  for d in $ZPLUGINDIR/*/.git(/); do
    echo "Updating ${d:h:t}..."
    command git -C "${d:h}" pull --ff --recurse-submodules --depth 1 --rebase --autostash
  done
}

function plugin-compile {
  ZPLUGINDIR=${ZPLUGINDIR:-$HOME/.config/zsh/plugins}
  autoload -U zrecompile
  local f
  for f in $ZPLUGINDIR/**/*.zsh{,-theme}(N); do
    zrecompile -pq "$f"
  done
}

# declare a simple plugin-clone function, leaving the user to load plugins themselves
function plugin-clone {
  local repo plugdir initfile
  ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME/.config/zsh}/plugins}
  for repo in $@; do
    plugdir=$ZPLUGINDIR/${repo:t}
    initfile=$plugdir/${repo:t}.plugin.zsh
    if [[ ! -d $plugdir ]]; then
      echo "Cloning $repo into $plugdir..."
      git clone -q --depth 1 --recursive --shallow-submodules https://github.com/$repo $plugdir
    fi
    if [[ ! -e $initfile ]]; then
      local -a initfiles=($plugdir/*.plugin.{z,}sh(N) $plugdir/*.{z,}sh{-theme,}(N))
      (( $#initfiles )) && ln -sf "${initfiles[1]}" "$initfile"
    fi
  done
}

function plugin-source {
  local plugdir
  ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME/.config/zsh}/plugins}
  for plugdir in $@; do
    [[ $plugdir = /* ]] || plugdir=$ZPLUGINDIR/$plugdir
    fpath+=$plugdir
    local initfile=$plugdir/${plugdir:t}.plugin.zsh
    (( $+functions[zsh-defer] )) && zsh-defer . $initfile || . $initfile
  done
}

# make a github repo plugins list
repos=(
  # not-sourcable plugins
  romkatv/zsh-bench

  # projects with nested plugins
  belak/zsh-utils
  ohmyzsh/ohmyzsh

  # regular plugins
  romkatv/zsh-defer
  zsh-users/zsh-autosuggestions
  zsh-users/zsh-history-substring-search
  zdharma-continuum/fast-syntax-highlighting
  Aloxaf/fzf-tab
  jeffreytse/zsh-vi-mode

  #theme
  romkatv/powerlevel10k
)

plugin-clone $repos

# handle non-standard plugins
export PATH="$ZPLUGINDIR/zsh-bench:$PATH"


# source other plugins
beforeCompInit=(
  powerlevel10k # theme
  zsh-defer # everything after this is "deferred"
  zsh-utils/history
  zsh-utils/completion
  zsh-utils/utility
  zsh-vi-mode
    
  ## omz plugins
  ohmyzsh/plugins/history-substring-search
  ohmyzsh/plugins/z
  ohmyzsh/plugins/docker
  ohmyzsh/plugins/kubectl

)

plugin-source $beforeCompInit



autoload -Uz compinit
compinit

# some stuff in ohmyzsh wants access to compdef...
# so putting it here
# handle non-standard plugins
#for file in $ZPLUGINDIR/ohmyzsh/lib/*.zsh; do
#  source $file
#done


afterCompInit=(
  fzf-tab # has to be after compinit && before fast-syntax-highlighting and zsh-autosuggestions

  fast-syntax-highlighting
  zsh-autosuggestions
)

plugin-source $afterCompInit

